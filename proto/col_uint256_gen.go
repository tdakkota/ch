// Code generated by ./cmd/ch-gen-int, DO NOT EDIT.

package proto

import (
	"encoding/binary"
	"github.com/go-faster/errors"
)

// ClickHouse uses LittleEndian.
var _ = binary.LittleEndian

// ColUInt256 represents UInt256 column.
type ColUInt256 []UInt256

// Compile-time assertions for ColUInt256.
var (
	_ ColInput  = ColUInt256{}
	_ ColResult = (*ColUInt256)(nil)
	_ Column    = (*ColUInt256)(nil)
)

// Type returns ColumnType of UInt256.
func (ColUInt256) Type() ColumnType {
	return ColumnTypeUInt256
}

// Rows returns count of rows in column.
func (c ColUInt256) Rows() int {
	return len(c)
}

// Reset resets data in row, preserving capacity for efficiency.
func (c *ColUInt256) Reset() {
	*c = (*c)[:0]
}

// NewArrUInt256 returns new Array(UInt256).
func NewArrUInt256() *ColArr {
	return &ColArr{
		Data: new(ColUInt256),
	}
}

// AppendUInt256 appends slice of UInt256 to Array(UInt256).
func (c *ColArr) AppendUInt256(data []UInt256) {
	d := c.Data.(*ColUInt256)
	*d = append(*d, data...)
	c.Offsets = append(c.Offsets, uint64(len(*d)))
}

// EncodeColumn encodes UInt256 rows to *Buffer.
func (c ColUInt256) EncodeColumn(b *Buffer) {
	const size = 256 / 8
	offset := len(b.Buf)
	b.Buf = append(b.Buf, make([]byte, size*len(c))...)
	for _, v := range c {
		binPutUInt256(
			b.Buf[offset:offset+size],
			v,
		)
		offset += size
	}
}

// DecodeColumn decodes UInt256 rows from *Reader.
func (c *ColUInt256) DecodeColumn(r *Reader, rows int) error {
	if rows == 0 {
		return nil
	}
	const size = 256 / 8
	data, err := r.ReadRaw(rows * size)
	if err != nil {
		return errors.Wrap(err, "read")
	}
	v := append(*c, make([]UInt256, rows)...)

	var (
		n = 0
		i = 0
	)
	const (
		unroll         = 4
		unrollByteSize = size * unroll
	)
	if len(data) > unrollByteSize {
		_ = data[:len(data)-unrollByteSize]
		for i = 0; i <= len(data)-unrollByteSize; i += unrollByteSize {
			src := [unroll]UInt256{}
			const offset0 = 0 + size + size + size
			src[3] =
				binUInt256(data[i+offset0 : i+offset0+size : i+offset0+size])
			const offset1 = 0 + size + size
			src[2] =
				binUInt256(data[i+offset1 : i+offset1+size : i+offset1+size])
			const offset2 = 0 + size
			src[1] =
				binUInt256(data[i+offset2 : i+offset2+size : i+offset2+size])
			const offset3 = 0
			src[0] =
				binUInt256(data[i+offset3 : i+offset3+size : i+offset3+size])
			copy(v[n:n+unroll:n+unroll], src[:])
			n += unroll
		}
	}
	for _ = i; i < len(data); i += size {
		v[n] =
			binUInt256(data[i:])
		n++
	}
	*c = v
	return nil
}
